#pragma kernel CSMain

#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Utility.hlsl"
#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Geometry.hlsl"

Texture2D<float> Input;
RWTexture2D<float4> Result;
uint Resolution;
float3 Scale;
float3 TerrainScale, TerrainSize;
float Offset;

float GetHeight(int x, int y)
{
	uint2 size;
	Input.GetDimensions(size.x, size.y);

	return Input[clamp(int2(x, y), 0, size - 1)].r;
}

void GetDerivatives(int2 id, float3 Scale, out float2 d0, out float3 d1)
{
	float tl = GetHeight(id.x - 1, id.y + 1);
	float t = GetHeight(id.x + 0, id.y + 1);
	float tr = GetHeight(id.x + 1, id.y + 1);
	float l = GetHeight(id.x - 1, id.y + 0);
	float c = GetHeight(id.x + 0, id.y + 0);
	float r = GetHeight(id.x + 1, id.y + 0);
	float bl = GetHeight(id.x - 1, id.y - 1);
	float b = GetHeight(id.x + 0, id.y - 1);
	float br = GetHeight(id.x + 1, id.y - 1);

    //p, q
	d0.x = (r - l) / (2.0 * Scale.x);
	d0.y = (t - b) / (2.0 * Scale.z);

    //r, t, s
	d1.x = (r - 2.0 * c + l) / (Scale.x * Scale.x);
	d1.y = (t - 2.0 * c + b) / (Scale.z * Scale.z);
	d1.z = (tr - br - tl + bl) / (4.0 * Scale.x * Scale.z);
}


[numthreads(8, 8, 1)]
void CSMain(uint2 id : SV_DispatchThreadID)
{
	float _DirectionCount = 8;
	float _SampleCount = 128;
	uint2 pixelCenter = id;
	
	float screenspaceRadius = 256;
	
	float2 d0;
	float3 d1;
	GetDerivatives(id, Scale, d0, d1);
	
	float2 uv = (id + 0.5) / float(Resolution);
	
	float maxHeight = Offset + TerrainSize.y;
	float viewspaceZ = maxHeight - Input[id];
	float3 cPosV = float3(uv * TerrainSize.xz, viewspaceZ);
	float3 viewV = float3(0.0, 0.0, -1.0);
	
	float3 normalV = normalize(float3(d0, -1.0));
	
	float4 result = 0.0;
	for (float i = 0; i < _DirectionCount; i++)
	{
		float phi = Pi / _DirectionCount * (i + 0.5);
		float3 directionV = float3(cos(phi), sin(phi), 0.0);
		
		float3 axisV = normalize(cross(directionV, viewV));
		float3 projNormalV = ProjectOnPlane(normalV, axisV);
	
		float sgnN = sign(dot(directionV, projNormalV));
		float cosN = saturate(dot(projNormalV, viewV) / length(projNormalV));
		float n = sgnN * FastACos(cosN);
		
		float2 h;
		
		[unroll]
		for (uint side = 0; side < 2; side++)
		{
			// Find the intersection with the next pixel, and use that as the starting point for the ray
			float2 direction = directionV.xy * (2.0 * side - 1.0);
			float2 cell = pixelCenter;
			float2 tMin = (cell - (pixelCenter + 0.5)) / direction;
			float2 tMax = (cell - (pixelCenter + 0.5) + 1.0) / direction;
			float t = Max2(max(tMin, tMax));
			float2 start = (pixelCenter + 0.5) + direction * t;
			float2 end = (pixelCenter + 0.5) + direction * screenspaceRadius;
			float2 step = (end - start) / _SampleCount;
			
			//start = (pixelCenter + 0.5);
			//end = start + direction * screenspaceRadius;
			//step = (end - start) / _SampleCount;
			
			float lowHorizonCos = cos(n + (2.0 * side - 1.0) * HalfPi);
			float cHorizonCos = lowHorizonCos;
			
			for (float j = 0.0; j < _SampleCount; j++)
			{
				uint2 position = uint2(start + (j + 0.5) * step);
				
				if (all(position == id))
					continue;
				
				float SZ = Input[position];
				float3 sPosV = float3((position + 0.5) / float(Resolution) * TerrainSize.xz, maxHeight - SZ);
				
				float3 sHorizonV = normalize(sPosV - cPosV);

				// Falloff
				float start = screenspaceRadius * 0.75;
				float end = screenspaceRadius;
				float weight = saturate((end - distance(sPosV, cPosV)) / (end - start));
				float sHorizonCos = lerp(lowHorizonCos, dot(sHorizonV, viewV), weight);
			
				if (sHorizonCos >= cHorizonCos)
				{
					// If weighted horizon is greater than the previous sample, it becomes the new horizon
					cHorizonCos = sHorizonCos;
				}
				//else if (dot(sHorizonV, viewV) < cHorizonCos)
				//{
				//	// Otherwise, reduce the max horizon to attenuate thin features, but only if the -non- weighted sample is also below the current sample
				//	// This prevents the falloff causing objects to be treated as thin when they would not be otherwise
				//	cHorizonCos = max(lowHorizonCos, cHorizonCos - _ThinOccluderCompensation);
				//}
			}

			h[side] = n + clamp((2.0 * side - 1.0) * FastACos(cHorizonCos) - n, -HalfPi, HalfPi);
			result.w += length(projNormalV) * (cosN + 2.0 * h[side] * sin(n) - cos(2.0 * h[side] - n)) / 4.0;
		}
		
		// see "Algorithm 2 Extension that computes bent normals b."
		float t0 = (6 * sin(h[0] - n) - sin(3 * h[0] - n) + 6 * sin(h[1] - n) - sin(3 * h[1] - n) + 16 * sin(n) - 3 * (sin(h[0] + n) + sin(h[1] + n))) / 12;
		float t1 = (-cos(3 * h[0] - n) - cos(3 * h[1] - n) + 8 * cos(n) - 3 * (cos(h[0] + n) + cos(h[1] + n))) / 12;
	
		float3 bentNormalL = normalize(float3(directionV.x * t0, directionV.y * t0, -t1));
		result.xyz += bentNormalL * length(projNormalV);
	}
	
	
	result /= _DirectionCount;
	result /= length(result.rgb);
	
	//result.xyz = normalV;
	result.xyz = float3(-result.x, -result.z, -result.y);
	
	result.xyz = 0.5 * result.xyz + 0.5;
	Result[id] = result;
}
